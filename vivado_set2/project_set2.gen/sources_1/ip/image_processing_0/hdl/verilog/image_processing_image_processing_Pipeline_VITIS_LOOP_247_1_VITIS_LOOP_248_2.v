// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module image_processing_image_processing_Pipeline_VITIS_LOOP_247_1_VITIS_LOOP_248_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        empty,
        frame_in_pixel_address0,
        frame_in_pixel_ce0,
        frame_in_pixel_q0,
        frame_in_pixel_address1,
        frame_in_pixel_ce1,
        frame_in_pixel_q1,
        frame_out1_pixel_address0,
        frame_out1_pixel_ce0,
        frame_out1_pixel_we0,
        frame_out1_pixel_d0,
        frame_out2_pixel_address0,
        frame_out2_pixel_ce0,
        frame_out2_pixel_we0,
        frame_out2_pixel_d0,
        add_ln282
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] empty;
output  [13:0] frame_in_pixel_address0;
output   frame_in_pixel_ce0;
input  [95:0] frame_in_pixel_q0;
output  [13:0] frame_in_pixel_address1;
output   frame_in_pixel_ce1;
input  [95:0] frame_in_pixel_q1;
output  [13:0] frame_out1_pixel_address0;
output   frame_out1_pixel_ce0;
output   frame_out1_pixel_we0;
output  [95:0] frame_out1_pixel_d0;
output  [13:0] frame_out2_pixel_address0;
output   frame_out2_pixel_ce0;
output   frame_out2_pixel_we0;
output  [95:0] frame_out2_pixel_d0;
input  [13:0] add_ln282;

reg ap_idle;
reg frame_in_pixel_ce0;
reg frame_in_pixel_ce1;
reg frame_out1_pixel_ce0;
reg frame_out1_pixel_we0;
reg frame_out2_pixel_ce0;
reg frame_out2_pixel_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln247_fu_151_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [6:0] select_ln247_fu_181_p3;
reg   [6:0] select_ln247_reg_308;
wire   [6:0] select_ln247_1_fu_189_p3;
reg   [6:0] select_ln247_1_reg_313;
wire   [13:0] zext_ln282_fu_218_p1;
reg   [13:0] zext_ln282_reg_318;
reg   [13:0] zext_ln282_reg_318_pp0_iter2_reg;
wire   [13:0] mul_ln282_fu_221_p2;
reg   [13:0] mul_ln282_reg_323;
wire   [13:0] zext_ln279_1_fu_227_p1;
reg   [13:0] zext_ln279_1_reg_329;
wire   [13:0] add_ln282_1_fu_230_p2;
reg   [13:0] add_ln282_1_reg_337;
wire   [63:0] zext_ln282_2_fu_243_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln279_2_fu_248_p1;
wire   [63:0] zext_ln282_1_fu_252_p1;
wire   [63:0] zext_ln279_3_fu_256_p1;
reg   [6:0] j_fu_56;
wire   [6:0] add_ln248_fu_197_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_j_load;
reg   [6:0] i_fu_60;
reg   [6:0] ap_sig_allocacmp_i_load;
reg   [12:0] indvar_flatten_fu_64;
wire   [12:0] add_ln247_1_fu_157_p2;
reg   [12:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln248_fu_175_p2;
wire   [6:0] add_ln247_fu_169_p2;
wire   [6:0] mul_ln282_fu_221_p0;
wire   [7:0] mul_ln282_fu_221_p1;
wire   [13:0] sub_ln282_fu_234_p2;
wire   [13:0] add_ln282_2_fu_238_p2;
wire   [13:0] grp_fu_260_p4;
wire   [13:0] grp_fu_270_p3;
wire   [6:0] grp_fu_260_p1;
wire   [6:0] grp_fu_260_p2;
wire   [6:0] grp_fu_260_p3;
wire   [6:0] grp_fu_270_p0;
wire   [6:0] grp_fu_270_p1;
wire   [6:0] grp_fu_270_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [13:0] grp_fu_270_p00;
wire   [13:0] mul_ln282_fu_221_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

image_processing_mul_7ns_8ns_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 14 ))
mul_7ns_8ns_14_1_1_U1(
    .din0(mul_ln282_fu_221_p0),
    .din1(mul_ln282_fu_221_p1),
    .dout(mul_ln282_fu_221_p2)
);

image_processing_ama_submuladd_7ns_7ns_7ns_7ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 7 ),
    .din3_WIDTH( 7 ),
    .dout_WIDTH( 14 ))
ama_submuladd_7ns_7ns_7ns_7ns_14_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty),
    .din1(grp_fu_260_p1),
    .din2(grp_fu_260_p2),
    .din3(grp_fu_260_p3),
    .ce(1'b1),
    .dout(grp_fu_260_p4)
);

image_processing_mac_muladd_7ns_7ns_7ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 14 ))
mac_muladd_7ns_7ns_7ns_14_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_270_p0),
    .din1(grp_fu_270_p1),
    .din2(grp_fu_270_p2),
    .ce(1'b1),
    .dout(grp_fu_270_p3)
);

image_processing_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln247_fu_151_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_60 <= select_ln247_1_fu_189_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_60 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln247_fu_151_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_64 <= add_ln247_1_fu_157_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_64 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln247_fu_151_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_56 <= add_ln248_fu_197_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_56 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln282_1_reg_337 <= add_ln282_1_fu_230_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        zext_ln282_reg_318_pp0_iter2_reg[6 : 0] <= zext_ln282_reg_318[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        mul_ln282_reg_323 <= mul_ln282_fu_221_p2;
        zext_ln279_1_reg_329[6 : 0] <= zext_ln279_1_fu_227_p1[6 : 0];
        zext_ln282_reg_318[6 : 0] <= zext_ln282_fu_218_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln247_fu_151_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln247_1_reg_313 <= select_ln247_1_fu_189_p3;
        select_ln247_reg_308 <= select_ln247_fu_181_p3;
    end
end

always @ (*) begin
    if (((icmp_ln247_fu_151_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 7'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_60;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 13'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 7'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        frame_in_pixel_ce0 = 1'b1;
    end else begin
        frame_in_pixel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        frame_in_pixel_ce1 = 1'b1;
    end else begin
        frame_in_pixel_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        frame_out1_pixel_ce0 = 1'b1;
    end else begin
        frame_out1_pixel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        frame_out1_pixel_we0 = 1'b1;
    end else begin
        frame_out1_pixel_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        frame_out2_pixel_ce0 = 1'b1;
    end else begin
        frame_out2_pixel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        frame_out2_pixel_we0 = 1'b1;
    end else begin
        frame_out2_pixel_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln247_1_fu_157_p2 = (ap_sig_allocacmp_indvar_flatten_load + 13'd1);

assign add_ln247_fu_169_p2 = (ap_sig_allocacmp_i_load + 7'd1);

assign add_ln248_fu_197_p2 = (select_ln247_fu_181_p3 + 7'd1);

assign add_ln282_1_fu_230_p2 = (mul_ln282_reg_323 + zext_ln279_1_reg_329);

assign add_ln282_2_fu_238_p2 = (mul_ln282_reg_323 + sub_ln282_fu_234_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign frame_in_pixel_address0 = zext_ln279_2_fu_248_p1;

assign frame_in_pixel_address1 = zext_ln282_2_fu_243_p1;

assign frame_out1_pixel_address0 = zext_ln279_3_fu_256_p1;

assign frame_out1_pixel_d0 = frame_in_pixel_q0;

assign frame_out2_pixel_address0 = zext_ln282_1_fu_252_p1;

assign frame_out2_pixel_d0 = frame_in_pixel_q1;

assign grp_fu_260_p1 = ((icmp_ln248_fu_175_p2[0:0] == 1'b1) ? add_ln247_fu_169_p2 : ap_sig_allocacmp_i_load);

assign grp_fu_260_p2 = 14'd100;

assign grp_fu_260_p3 = zext_ln279_1_reg_329;

assign grp_fu_270_p0 = grp_fu_270_p00;

assign grp_fu_270_p00 = select_ln247_reg_308;

assign grp_fu_270_p1 = 14'd100;

assign grp_fu_270_p2 = zext_ln282_reg_318_pp0_iter2_reg;

assign icmp_ln247_fu_151_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 13'd6700) ? 1'b1 : 1'b0);

assign icmp_ln248_fu_175_p2 = ((ap_sig_allocacmp_j_load == 7'd100) ? 1'b1 : 1'b0);

assign mul_ln282_fu_221_p0 = mul_ln282_fu_221_p00;

assign mul_ln282_fu_221_p00 = select_ln247_1_reg_313;

assign mul_ln282_fu_221_p1 = 14'd100;

assign select_ln247_1_fu_189_p3 = ((icmp_ln248_fu_175_p2[0:0] == 1'b1) ? add_ln247_fu_169_p2 : ap_sig_allocacmp_i_load);

assign select_ln247_fu_181_p3 = ((icmp_ln248_fu_175_p2[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_j_load);

assign sub_ln282_fu_234_p2 = (add_ln282 - zext_ln279_1_reg_329);

assign zext_ln279_1_fu_227_p1 = select_ln247_reg_308;

assign zext_ln279_2_fu_248_p1 = grp_fu_260_p4;

assign zext_ln279_3_fu_256_p1 = grp_fu_270_p3;

assign zext_ln282_1_fu_252_p1 = add_ln282_1_reg_337;

assign zext_ln282_2_fu_243_p1 = add_ln282_2_fu_238_p2;

assign zext_ln282_fu_218_p1 = select_ln247_1_reg_313;

always @ (posedge ap_clk) begin
    zext_ln282_reg_318[13:7] <= 7'b0000000;
    zext_ln282_reg_318_pp0_iter2_reg[13:7] <= 7'b0000000;
    zext_ln279_1_reg_329[13:7] <= 7'b0000000;
end

endmodule //image_processing_image_processing_Pipeline_VITIS_LOOP_247_1_VITIS_LOOP_248_2
